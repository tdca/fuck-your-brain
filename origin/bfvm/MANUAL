Brainfuck Virtual Machine v0.01 Reference Manual
BFVM 0.01 参考手册

BFVM是一个基于Brainfuck程序设计语言设计的机器模型的虚拟机实现,
其中加入了BFVM二进制码执行系统,Brainfuck代码编译系统,指令转换
系统等.

0.1 文件及目录说明

MANUAL	使用手册
TODO	待增添内容列表
CHANGELOG	版本修改记录

src	源代码文档
bin 二进制文件
examples	示例代码

1.1 指令集:

,	获取输入并保存到当前数据空间
.	输出当前数据空间的值
+	当前数据空间的值+1
-	当前数据空间的值-1
>	当前数据指针的值+1
<	当前数据指针的值-1
[	根据当前数据空间内容进行判断执行循环
]	根据当前空间内容进行判断进行推出循环

示例代码:
++++++[->++++++++<]++++++++++[->.+<]
输出结果为:
0123456789

1.2 BFVM命令参数

--debug <bytecode>	执行<bytecode>,并进行调试.
-i <source>	加载<source>的内容,编译输出到"temp.byte",并解释执行.
-c <source> <destination>	加载<source>的内容,编译输出到<destination>.
-e <bytecode>	执行<bytecode>.

1.3 技术实现

1.3.1 堆栈系统

系统中使用了四个堆栈来进行各项任务的执行,其中有运行时堆栈两个,非运行时
堆栈两个;其中,运行时堆栈一个放置运行时指令,另一个放置运行时数据;非运行
时堆栈则是在其中参与编译和解释工作.
ss	源代码堆栈
bs	字节码堆栈
ds	数据堆栈
is	指令堆栈

1.3.2 指针系统

系统中同样使用了四个指针来进行各项任务的执行,其中有运行时两个,非运行时
两个;其中,运行时堆栈一个放置运行时指令,另一个放置运行时数据;非运行时堆
栈则是在其中参与编译和解释工作.
sp	源代码指针
bp	字节码指针
dp	数据指针
ip	指令指针

1.3.3 寄存器的实现

数据寄存器和指令寄存器的实现方式如下:
#define dr ds[dp]
#define ir is[ip]

另外,系统中添加了另外一个用于处理流程控制语句的指令寄存器
ic

1.3.4 执行流程

通过gs获取源代码文件
通过s2b将源代码文件转换成字节码
通过pb将字节码放入二进制文件中
通过lb加载待执行的二进制文件
通过b2i将字节码转换为指令
使用id作为指令译码器,执行并输出

1.4 其他

版本变动情况:详见CHANGELOG
待改动或增加的内容:详见:TODO

1.5 版权信息

本软件及其相关的内容通过MIT License授权.
相关著作内容遵循 CreativeCommom by-no-sa 协议.

Bug汇报:kenpusney@gmail.com

